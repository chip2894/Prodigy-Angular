import { IconService } from './icon.service';
import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { normalize, SVG } from './svg';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from './icon.service';
export class IconDirective {
    constructor(domSanitizer, iconService) {
        this.domSanitizer = domSanitizer;
        this.iconService = iconService;
        this.width = '1em';
        this.height = '1em';
        this.rotate = 0;
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes) {
            this.updateIcon();
        }
    }
    updateIcon() {
        const icon = this.getIcon();
        const svg = new SVG(normalize(icon));
        this.iconHTML = this.generateSvgHtml(svg);
    }
    getIcon() {
        const iconInput = this.icon || this.icIcon;
        if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {
            throw new Error('[Iconify]: No icon provided');
        }
        return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);
    }
    generateSvgHtml(svg) {
        return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({
            width: this.size || this.width,
            height: this.size || this.height,
            color: this.color,
            inline: this.inline,
            box: this.box,
            align: this.align,
            hFlip: this.hFlip,
            vFlip: this.vFlip,
            flip: this.flip,
            rotate: this.rotate
        }));
    }
}
IconDirective.ɵfac = function IconDirective_Factory(t) { return new (t || IconDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IconService)); };
IconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IconDirective, selectors: [["ic-icon"], ["", "icIcon", ""]], hostVars: 3, hostBindings: function IconDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("innerHTML", ctx.iconHTML, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵclassProp("ic-inline", ctx.inline);
    } }, inputs: { width: "width", height: "height", rotate: "rotate", icIcon: "icIcon", icon: "icon", color: "color", inline: "inline", box: "box", size: "size", align: "align", hFlip: "hFlip", vFlip: "vFlip", flip: "flip" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
IconDirective.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconService }
];
IconDirective.propDecorators = {
    icIcon: [{ type: Input }],
    icon: [{ type: Input }],
    color: [{ type: Input }],
    inline: [{ type: Input }, { type: HostBinding, args: ['class.ic-inline',] }],
    box: [{ type: Input }],
    size: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    align: [{ type: Input }],
    hFlip: [{ type: Input }],
    vFlip: [{ type: Input }],
    flip: [{ type: Input }],
    rotate: [{ type: Input }],
    iconHTML: [{ type: HostBinding, args: ['innerHTML',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IconDirective, [{
        type: Directive,
        args: [{
                selector: 'ic-icon,[icIcon]'
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: ɵngcc2.IconService }]; }, { width: [{
            type: Input
        }], height: [{
            type: Input
        }], rotate: [{
            type: Input
        }], iconHTML: [{
            type: HostBinding,
            args: ['innerHTML']
        }], icIcon: [{
            type: Input
        }], icon: [{
            type: Input
        }], color: [{
            type: Input
        }], inline: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.ic-inline']
        }], box: [{
            type: Input
        }], size: [{
            type: Input
        }], align: [{
            type: Input
        }], hFlip: [{
            type: Input
        }], vFlip: [{
            type: Input
        }], flip: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,