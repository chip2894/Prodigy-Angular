import { NgModule } from '@angular/core';
import { ShowdownConfig } from './showdown-config.provider';
import { ShowdownConverter } from './showdown-converter.provider';
import { ShowdownComponent } from './showdown.component';
import { ShowdownPipe } from './showdown.pipe';
import { SourceDirective } from './source.directive';
/**
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
const DECLARATIONS = [
    ShowdownComponent,
    ShowdownPipe,
    SourceDirective
];
/**
 * ### Example
 *
 * Add `ShowdownModule` to app `imports`.
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownModule } from 'ngx-showdown';
 *
 * @NgModule({
 *   imports: [ ShowdownModule ];
 * })
 * export class AppModule {}
 * ```
 */
export class ShowdownModule {
    /**
     * __Example :__
     *
     * Add `ShowdownModule` to app `imports` with config.
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownModule } from 'ngx-showdown';
     *
     * @NgModule({
     *   imports: [ ShowdownModule.forRoot({
     *     smartIndentationFix: true,
     *     foo: 'bar',
     *     flavor: 'github',
     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]
     *   }) ];
     * })
     * export class AppModule {}
     * ```
     * @param config - A root converter config for all converter instances.
     */
    static forRoot(config) {
        return {
            ngModule: ShowdownModule,
            providers: [{ provide: ShowdownConfig, useValue: config }]
        };
    }
}
ShowdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShowdownModule });
ShowdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShowdownModule_Factory(t) { return new (t || ShowdownModule)(); }, providers: [ShowdownConverter] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShowdownModule, { declarations: [ShowdownComponent,
        ShowdownPipe,
        SourceDirective], exports: [ShowdownComponent,
        ShowdownPipe,
        SourceDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownModule, [{
        type: NgModule,
        args: [{
                declarations: DECLARATIONS,
                providers: [ShowdownConverter],
                exports: DECLARATIONS
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvd2Rvd24ubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hvd2Rvd24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJEO0FBQ0E7QUFDQSxHQUFHOztBQUNILE1BQU0sWUFBWSxHQUFHO0FBQ3JCLElBQUUsaUJBQWlCO0FBQ25CLElBQUUsWUFBWTtBQUNkLElBQUUsZUFBZTtBQUNqQixDQUFDLENBQUM7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFNSCxNQUFNLE9BQU8sY0FBYztBQUMzQixJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFHbkI7QUFBZTtBQUFVO0FBRVA7QUFBVztBQUVKLE9BRHpCO0FBQ0wsSUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWtEO0FBQUksUUFDbkUsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGNBQWM7QUFDOUIsWUFBTSxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDO0FBQzlELFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzBDQWpDQyxRQUFRLFNBQUM7SUFDUixZQUFZLEVBQUUsWUFBWSxrQkFDMUIsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUMsa0JBQzlCLE9BQU8sRUFBRSxZQUFZLGNBQ3RCOzs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nO1xuaW1wb3J0IHsgU2hvd2Rvd25Db25maWcgfSBmcm9tICcuL3Nob3dkb3duLWNvbmZpZy5wcm92aWRlcic7XG5pbXBvcnQgeyBTaG93ZG93bkNvbnZlcnRlciB9IGZyb20gJy4vc2hvd2Rvd24tY29udmVydGVyLnByb3ZpZGVyJztcbmltcG9ydCB7IFNob3dkb3duQ29tcG9uZW50IH0gZnJvbSAnLi9zaG93ZG93bi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2hvd2Rvd25QaXBlIH0gZnJvbSAnLi9zaG93ZG93bi5waXBlJztcbmltcG9ydCB7IFNvdXJjZURpcmVjdGl2ZSB9IGZyb20gJy4vc291cmNlLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IERFQ0xBUkFUSU9OUyA9IFtcbiAgU2hvd2Rvd25Db21wb25lbnQsXG4gIFNob3dkb3duUGlwZSxcbiAgU291cmNlRGlyZWN0aXZlXG5dO1xuXG4vKipcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogQWRkIGBTaG93ZG93bk1vZHVsZWAgdG8gYXBwIGBpbXBvcnRzYC5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBTaG93ZG93bk1vZHVsZSB9IGZyb20gJ25neC1zaG93ZG93bic7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogWyBTaG93ZG93bk1vZHVsZSBdO1xuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqIGBgYFxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IERFQ0xBUkFUSU9OUyxcbiAgcHJvdmlkZXJzOiBbU2hvd2Rvd25Db252ZXJ0ZXJdLFxuICBleHBvcnRzOiBERUNMQVJBVElPTlNcbn0pXG5leHBvcnQgY2xhc3MgU2hvd2Rvd25Nb2R1bGUge1xuXG4gIC8qKlxuICAgKiBfX0V4YW1wbGUgOl9fXG4gICAqXG4gICAqIEFkZCBgU2hvd2Rvd25Nb2R1bGVgIHRvIGFwcCBgaW1wb3J0c2Agd2l0aCBjb25maWcuXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAgICogaW1wb3J0IHsgU2hvd2Rvd25Nb2R1bGUgfSBmcm9tICduZ3gtc2hvd2Rvd24nO1xuICAgKlxuICAgKiBATmdNb2R1bGUoe1xuICAgKiAgIGltcG9ydHM6IFsgU2hvd2Rvd25Nb2R1bGUuZm9yUm9vdCh7XG4gICAqICAgICBzbWFydEluZGVudGF0aW9uRml4OiB0cnVlLFxuICAgKiAgICAgZm9vOiAnYmFyJyxcbiAgICogICAgIGZsYXZvcjogJ2dpdGh1YicsXG4gICAqICAgICBleHRlbnNpb25zOiBbIHt0eXBlOidsaXN0ZW5lcicsIGxpc3RlbmVyczogeydjb2RlQmxvY2tzLmFmdGVyJzogY29uc29sZS5sb2d9fSBdXG4gICAqICAgfSkgXTtcbiAgICogfSlcbiAgICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxuICAgKiBgYGBcbiAgICogQHBhcmFtIGNvbmZpZyAtIEEgcm9vdCBjb252ZXJ0ZXIgY29uZmlnIGZvciBhbGwgY29udmVydGVyIGluc3RhbmNlcy5cbiAgICovXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogU2hvd2Rvd25Db25maWcgfCBTaG93ZG93bi5Db252ZXJ0ZXJPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVyczxTaG93ZG93bk1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU2hvd2Rvd25Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogU2hvd2Rvd25Db25maWcsIHVzZVZhbHVlOiBjb25maWd9XVxuICAgIH07XG4gIH1cblxufVxuIl19