import { Injectable, Optional } from '@angular/core';
import * as Showdown from 'showdown';
import { ShowdownConfig } from './showdown-config.provider';
/**
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './showdown-config.provider';
let { hasOwnProperty } = {};
/**
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @NgModule({
 *   providers: [ ShowdownConverter ];
 * })
 * export class AppModule {}
 * ```
 *
 * Use the converter instance.
 * ```typescript
 * import { Injectable } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @Injectable()
 * export class SomeService {
 *   constructor(showdownConverter: ShowdownConverter) {
 *     let markdown: string = "**Some**";
 *     let html: string = showdownConverter.makeHtml(markdown);
 *     console.log(`some:\nmarkdown: ${markdown)\nhtml: ${html}\n`);
 *   }
 * }
 * ```
 */
export class ShowdownConverter extends Showdown.Converter {
    constructor(config) {
        super(config && { extensions: config.extensions });
        this.setFlavor((config && config.flavor) || 'vanilla');
        this.setOptions(config);
    }
    /**
     * Set options to the converter.
     *
     * @param options - A options object to set.
     */
    setOptions(options) {
        for (let key in options) {
            if (hasOwnProperty.call(options, key)) {
                this.setOption(key, options[key]);
            }
        }
    }
}
ShowdownConverter.ɵfac = function ShowdownConverter_Factory(t) { return new (t || ShowdownConverter)(ɵngcc0.ɵɵinject(ɵngcc1.ShowdownConfig, 8)); };
ShowdownConverter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ShowdownConverter, factory: ShowdownConverter.ɵfac });
ShowdownConverter.ctorParameters = () => [
    { type: ShowdownConfig, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownConverter, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ShowdownConfig, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvd2Rvd24tY29udmVydGVyLnByb3ZpZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hvd2Rvd24tY29udmVydGVyLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sS0FBSyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU1RDtBQUNBO0FBQ0EsR0FBRzs7O0FBQ0gsSUFBSSxFQUFDLGNBQWMsRUFBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsUUFBUSxDQUFDLFNBQVM7QUFDekQsSUFDRSxZQUF3QixNQUF1QjtBQUNqRCxRQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksRUFBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUM7QUFDckQsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQztBQUMzRCxRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLFVBQVUsQ0FBQyxPQUFpQztBQUFJLFFBQ3JELEtBQUssSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFO0FBQzdCLFlBQU0sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtBQUM3QyxnQkFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQyxhQUFPO0FBQ1AsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOzZDQXJCQyxVQUFVO21IQUNUO0FBQUM7QUFBMkMsWUFyQ3JDLGNBQWMsdUJBdUNSLFFBQVE7QUFBTTs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBTaG93ZG93biBmcm9tICdzaG93ZG93bic7XG5pbXBvcnQgeyBTaG93ZG93bkNvbmZpZyB9IGZyb20gJy4vc2hvd2Rvd24tY29uZmlnLnByb3ZpZGVyJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xubGV0IHtoYXNPd25Qcm9wZXJ0eX0gPSB7fTtcblxuLyoqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIFNldHVwIGFzIHN0YW5kYWxvbmVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBTaG93ZG93bkNvbnZlcnRlciB9IGZyb20gJ25neC1zaG93ZG93bic7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbIFNob3dkb3duQ29udmVydGVyIF07XG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogVXNlIHRoZSBjb252ZXJ0ZXIgaW5zdGFuY2UuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBTaG93ZG93bkNvbnZlcnRlciB9IGZyb20gJ25neC1zaG93ZG93bic7XG4gKlxuICogQEluamVjdGFibGUoKVxuICogZXhwb3J0IGNsYXNzIFNvbWVTZXJ2aWNlIHtcbiAqICAgY29uc3RydWN0b3Ioc2hvd2Rvd25Db252ZXJ0ZXI6IFNob3dkb3duQ29udmVydGVyKSB7XG4gKiAgICAgbGV0IG1hcmtkb3duOiBzdHJpbmcgPSBcIioqU29tZSoqXCI7XG4gKiAgICAgbGV0IGh0bWw6IHN0cmluZyA9IHNob3dkb3duQ29udmVydGVyLm1ha2VIdG1sKG1hcmtkb3duKTtcbiAqICAgICBjb25zb2xlLmxvZyhgc29tZTpcXG5tYXJrZG93bjogJHttYXJrZG93bilcXG5odG1sOiAke2h0bWx9XFxuYCk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2hvd2Rvd25Db252ZXJ0ZXIgZXh0ZW5kcyBTaG93ZG93bi5Db252ZXJ0ZXIge1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZz86IFNob3dkb3duQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnICYmIHtleHRlbnNpb25zOiBjb25maWcuZXh0ZW5zaW9uc30pO1xuICAgIHRoaXMuc2V0Rmxhdm9yKChjb25maWcgJiYgY29uZmlnLmZsYXZvcikgfHwgJ3ZhbmlsbGEnKTtcbiAgICB0aGlzLnNldE9wdGlvbnMoY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3B0aW9ucyB0byB0aGUgY29udmVydGVyLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEEgb3B0aW9ucyBvYmplY3QgdG8gc2V0LlxuICAgKi9cbiAgcHVibGljIHNldE9wdGlvbnMob3B0aW9uczogU2hvd2Rvd24uU2hvd2Rvd25PcHRpb25zKTogdm9pZCB7XG4gICAgZm9yIChsZXQga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgdGhpcy5zZXRPcHRpb24oa2V5LCBvcHRpb25zW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXX0=